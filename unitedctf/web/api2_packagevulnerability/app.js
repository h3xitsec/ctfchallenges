const express = require('express');
const app = express();
const morgan = require('morgan');
const swagger = require('swagger-ui-express');
const swaggerJsDocs = require('swagger-jsdoc');
const cors = require('cors');
const quotes = require('inspirational-quotes');
const mongoose = require('mongoose');
const systeminformation = require('systeminformation');

const users = require('./users.model');
if (process.env.NODE_ENV !== 'production') {
    require('dotenv').config();
}

const options = {
    definition: {
        openapi: "3.0.0",
        info: {
            title: "Quotes-A-Day",
            description: "Quotes for everyone (that has an account), everyday!",
            version: "2.0.0",
            contact: {
                name: "Admin",
                email: "admin@unite.com",
                url: "https://unitedctf.ca",
            }
        }
    },
    apis: [
        "./app.js",
    ]
}

const specs = swaggerJsDocs(options);

app.use(express.json());
app.use(express.urlencoded({extended: true}));
app.use(morgan('dev'));
app.use(cors());
app.use('/docs', swagger.serve, swagger.setup(specs))

mongoose.connect(process.env.MONGO_URL)
    .catch(e => console.log(e));

mongoose.set('debug', true)

app.get("/", (req, res) => res.redirect("/docs"));

/**
 * @swagger
 * components:
 *   schemas:
 *     Quotes:
 *          type: object
 *          properties:
 *              quote:
 *                  type: string
 *                  description: The generated quote
 *          example:
 *              quote: A successful man is one who can lay a firm foundation with the bricks others have thrown at him.
 *     User:
 *          type: object
 *          properties:
 *              email:
 *                  type: string
 *                  description: The registered user email
 *              password:
 *                  type: string
 *                  description: The registered user's password
 *          example:
 *              email: demo@unite.com
 *              password: demo
 *     APIKeyResponse:
 *          type: object
 *          properties:
 *              API_KEY:
 *                  type: string
 *                  description: API Key of the user
 *              message:
 *                  type: string
 *                  description: Status message
 *          example:
 *              API_KEY: 61256b5488b6c2f259093540
 *              password: Use API_KEY as the value to the api_key parameter in our other queries
 *     Response:
 *          type: object
 *          properties:
 *              message:
 *                  type: string
 *                  description: Status message
 *          example:
 *              message: Sample message.
 */

/**
 * @swagger
 * tags:
 *   name: Quotes
 *   description: Quote Generator API
 */

/**
 * @swagger
 * /quotes:
 *   get:
 *     summary: Returns a quote from our huge Mongo database!
 *     tags: [Quotes]
 *     parameters:
 *     -    in: query
 *          name: API_KEY
 *          schema:
 *              type: string
 *          required: true
 *          description: Your registered API Key provided through a post request to our /api_key endpoint
 *     responses:
 *       200:
 *         description: A randomly selected and generated quote
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Quotes'
 *       403:
 *         description: Invalid or missing API Key
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Response'
 */

app.get('/quotes', async (req, res) => {
    let valid = true;
    const api_key = req.query.API_KEY || req.query.api_key

    if (!api_key || api_key.length !== 24) {
        valid = false;
    }

    if (!valid) {
        return res.status(403).send({message: "Invalid or missing API Key"});
    }

    const user = await users.findOne({'id': req.query.API_KEY});

    if (!user) {
        return res.status(403).send({message: "Valid API Key format, but the user could not be found"});
    }

    res.status(200).send({"quote": quotes.getRandomQuote()});
});

/**
 * @swagger
 * /api_key:
 *   post:
 *     summary: Get your api_key. You must have an account with us, if not, speak with our administrator!
 *     tags: [API_KEY]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *              $ref: '#/components/schemas/User'
 *           example:
 *              email: demo@unite.com
 *              password: demo
 *     responses:
 *       200:
 *         description: The key was successfully created
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/APIKeyResponse'
 *       400:
 *         description: Invalid body
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Response'
 *       403:
 *          description: Invalid credentials
 *          content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Response'
 */

app.post('/api_key', async (req, res) => {
    await new Promise(r => setTimeout(r, 200));
    if (!req.body.email || !req.body.password) {
        return res.status(400).send({'message': "Invalid body"});
    }
    const user = await users.findOne({
        email: req.body.email.toString(),
        password: req.body.password.toString()
    })

    if (!user) {
        return res.status(404).send({
            "message": "Invalid credentials."
        });
    }

    return res.status(200).send({
        "API_KEY": user._id.toString(),
        "message": "Use API_KEY as the value to the api_key parameter in our other queries"
    });
})

/**
 * @swagger
 * /systemInfo:
 *   get:
 *     parameters:
 *        -    in: query
 *             name: service
 *             schema:
 *                 type: string
 *             required: true
 *             description: The url of the service to check, such as our /docs route, our /quotes route, etc.
 *             example: <Current URL>/docs/ or <Current URL>/quotes/
 *     summary: Get the current health of our services. This is our brand new feature where we provide our system's information to our users.
 *     tags: [System Health]
 *     responses:
 *       200:
 *         description: The service has been tested against our servers and we've established a result as to whether it's running or not.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Response'
 *       400:
 *         description: Missing service. Always include the service's name after the 'service' query parameter.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Response'
 *       403:
 *         description: The service is not available for checkup as of this update.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Response'
 *       500:
 *         description: Some weird server error. We'll have to check what the problem could be.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Response'
 */

 app.get("/systemInfo", async (req, res) => {
    const query = req.query.service
    if (!query) {
        return res.status(400).send({'message': "Site or service not found or not specified."});
    }
    const state = await systeminformation.inetChecksite(query)
    if (!state) {
        return res.status(403).send({
            'message': "Sorry, checking site or service health for these" +
                " services has not yet been implemented."
        });
    } else {
        if(state.ok) {
            return res.status(200).json({"message": "The requested site or service is currently up and running!"});
        } else {
            return res.status(200).json({"message": "The requested site or service is down at the moment." +
                    " We're terribly sorry for the inconvenience. Be sure to check back tomorrow for your daily quote!"});
        }
    }
})

const port = process.env.PORT || 9002;
app.listen(port);
console.log("Server listening on port " + port);

